#include <stdio.h>
#include <string.h>
#include <stdlib.h>
EXEC SQL BEGIN DECLARE SECTION;
int ca;
char a[30];
char b[30];
char crop[30];
float sum;
int foo;
char dis[30];
char tt[30];
char f_id[30];
char c_name[30];
char p_name[30];
char season[30];
int ppk2;
int temp;
double cost;
int z;
int y;
int x;
int w;
int year1;
int year2;
int income;
int coun;
int age;
char city[30];
char district[30];
char fin[30];
char foo1[30];
char f_name[30];
int c = 0;
EXEC SQL END DECLARE SECTION;


void executeQuery1()
{
	printf("Enter the year of which you want to find production amount of all crops in all districts\n");
	scanf("%d",&foo);
	EXEC SQL DECLARE curs CURSOR FOR select * from ((select crop_name , harvest_year , sum(produced_amount) , district from
(land NATURAL JOIN harvest) GROUP BY (crop_name , district , harvest_year))) as d where harvest_year = :foo;

	 EXEC SQL OPEN curs;
	 EXEC SQL FETCH curs INTO :crop ,  :temp , :dis , :b;
	while ( sqlca.sqlcode == 0) 
	{
		printf("Name of crop := %s\n" , crop);
		printf("Year := %d\n" , foo);
		printf("Name of district := %s\n" , dis);
		printf("Total production amount := %s\n" , b);
		printf("\n");
		EXEC SQL FETCH curs INTO :crop , :temp , :dis , :b;
	}
	EXEC SQL CLOSE curs;
}

void executeQuery2()
{
	printf("Enter the two the years which you wanna compare\n");
	scanf("%d",&year1);
	scanf("%d",&year2);
	EXEC SQL DECLARE curs1 CURSOR FOR select prod_base , prod_curr , ROUND(((prod_curr - prod_base) / prod_base)*100 , 2) as percentage_change, y.crop_name , y.district from
((select * from (select harvest_year , sum(produced_amount) as prod_base , district , crop_name from 
(land natural join harvest) GROUP By (crop_name , harvest_year , district)) as c where harvest_year = :year1) as y join

(select * from (select harvest_year , sum(produced_amount) as prod_curr , district , crop_name from 
(land natural join harvest) GROUP By (crop_name , harvest_year , district)) as d where harvest_year = :year2) as z on y.crop_name = z.crop_name and y.district = z.district);
	EXEC SQL OPEN curs1;
	
	EXEC SQL FETCH curs1 INTO :z , :y , :b , :crop , :a;
	while( sqlca.sqlcode == 0) 
	{
		printf("Name of crop := %s\n" , crop);
		printf("Production in base year = %d\n" , z);
		printf("Production in current year = %d\n" , y);
		printf("Percentage Change = %s\n" , b);
		printf("Name of district := %s\n" , a);
		printf("\n");
		EXEC SQL FETCH curs1 INTO :z , :y , :b , :crop , :a;
	}
	EXEC SQL CLOSE curs1;	
}

void executeQuery3()
{
	printf("Enter id of farmer:= ");
	scanf("%s",f_id);
	printf("Enter current year:= ");
	scanf("%d",&year1);
	EXEC SQL DECLARE curs2 CURSOR FOR select z.crop_name , da.pest_name , z.season from
((select distinct d.farmer_name , h.crop_name , h.season from
((select farmer_name , survey_number from (land natural join farmer) where farmer_id = :f_id) as d join harvest as h on d.survey_number = h.survey_number) where h.harvest_year = :year1) as z join damages as da on da.crop_name = z.crop_name);

	EXEC SQL OPEN curs2;
	
	EXEC SQL FETCH curs2 INTO :c_name , :p_name , :season;
	while( sqlca.sqlcode == 0) 
	{
		printf("Name of crop := %s\n" , c_name);
		printf("Pest name = %s\n" , p_name);
		printf("Name of season := %s\n" , season);
		printf("\n");
		EXEC SQL FETCH curs2 INTO :c_name , :p_name , :season;
	}
	EXEC SQL CLOSE curs2;	
}

void executeUpdate()
{
	printf("Enter farmer id:= ");
	scanf("%s",f_id);
	printf("\nEnter new income:= ");
	scanf("%d",&income);
	EXEC SQL UPDATE farmer set total_household_income = :income where farmer_id = :f_id;
	EXEC SQL COMMIT;
	if(sqlca.sqlcode == 0)
	{
		printf("Update successful\n");
	}	
	else
	{
		EXEC SQL WHENEVER SQLERROR SQLPRINT;
	}
	
	
}

void executeInsert()
{
	EXEC SQL select count(*) INTO :coun from farmer;
	coun++;
	c = 0;
	while(coun)
	{
		fin[c] = ('0' + (coun % 10));
		coun = coun / 10;
		c = c + 1;
	}
	foo1[0] = 'f';
	for (int i = c - 1 ; i >= 0 ; i--)
		foo1[c - 1 - i + 1] = fin[i];
	foo1[c + 1] = '\0';
	printf("Enter name of farmer:= ");
	scanf("%s" , f_name);
	printf("Enter age:= ");
	scanf("%d",&age);
	printf("Enter household income:= ");
	scanf("%d",&income);
	printf("Enter number of earning members:= ");
	scanf("%d",&z);
	printf("Enter number of non-earning members:= ");
	scanf("%d",&y);
	printf("Enter city or vilage:= ");
	scanf("%s",city);
	printf("Enter distict:= ");
	scanf("%s",district);
	EXEC SQL INSERT INTO farmer VALUES(:foo1 , :f_name , :age , :income , :z , :y , :city , :district);
	EXEC SQL COMMIT;
	if(sqlca.sqlcode == 0)
		printf("Insert successful\n");
	else
	{
		EXEC SQL WHENEVER SQLERROR SQLPRINT;
	}
}

int main ()
{	
	EXEC SQL CONNECT TO "201601061@10.100.71.21" USER "201601061" USING "nikesh1234";
	EXEC SQL WHENEVER SQLERROR SQLPRINT;
	EXEC SQL WHENEVER SQLWARNING SQLPRINT;	
	EXEC SQL set search_path to arms;
	int close=0;
	while(close == 0)
	{
		printf("Print 1 if you want to execute query and 2 if you want to execute an update and 3 if you want to insert a farmer\n");
		int cntr;
		scanf("%d",&cntr);
		if(cntr==1)
		{
			int qq;
			printf("Press\n1:To find total production amount of all crops in all districts\n2:Enter two years whose production you want to compare\n3.Probable pests present in current year in all your lands\n");
			scanf("%d",&qq);
			if(qq==1)
				executeQuery1();
			else if(qq==2)
				executeQuery2();
			else
				executeQuery3();
		}
		else if (cntr == 2)
		{
			executeUpdate();
		}
		else if (cntr == 3)
			executeInsert();
		else
			exit(0);
		printf("Enter 1 to exit the program and 0 to continue\n");
		scanf("%d",&close);
	}


	return 0;
}
