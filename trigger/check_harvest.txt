set search_path to arms;
drop trigger if exists check_harvest on harvest;
drop function if exists check_update_harvest();

create or replace function check_update_harvest()
	returns trigger
	
as $BODY$
declare 
	total_land_area land.total_cultivable_area%type;
	total_harvest_area harvest.production_area%type;
	
begin
	select total_cultivable_area
	into total_land_area
	from land 
	where survey_number = new.survey_number;
	
	select sum(production_area)
	into total_harvest_area
	from harvest
	group by survey_number, season, harvest_year
	having survey_number = new.survey_number and season = new.season and harvest_year = new.harvest_year;
	
	total_land_area := coalesce( total_land_area , 0 );
	total_harvest_area := coalesce( total_harvest_area , 0 );
	
	if TG_OP = 'INSERT' then 
		if total_land_area < total_harvest_area + new.production_area then
			raise exception 'Invalid entry!';
		end if;
		
		return new;
		
	elsif TG_OP = 'UPDATE' then
		if old.survey_number = new.survey_number then
			if total_land_area < total_harvest_area + new.production_area - old.production_area then
				raise exception 'Invalid entry!';
			end if;
		
			return new;
		else
			if total_land_area < total_harvest_area + new.production_area then
				raise exception 'Invalid entry!';
			end if;
		
			return new;
		end if;
		
	end if;
	
	return null;
	
end $BODY$ language 'plpgsql';

create trigger check_harvest
before insert or update 
on harvest
for each row
execute procedure check_update_harvest();